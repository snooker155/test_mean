#!/usr/bin/env node

process.env.NODE_ENV = process.env.NODE_ENV || 'development';

/**
 * Module dependencies.
 */

var config = require('../config/config');
var mongoose = require('../config/mongoose');


/**
 * Create DB server.
 */

var db = mongoose();



var app = require('../config/app');
var debug = require('debug')('test-mean:server');
var http = require('http');


/**
 * Add Passport.
 */

var passport = require('../config/passport')();



app.set('port', config.port);


/**
 * Create HTTP server.
 */

var server = http.createServer(app);



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(config.port);
server.on('error', onError);
server.on('listening', onListening);

console.log('Server running at http://localhost:' + config.port);


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
